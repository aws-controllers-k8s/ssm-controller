// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package patch_baseline

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/ssm"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/ssm/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ssm-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.PatchBaseline{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.GetPatchBaselineOutput
	resp, err = rm.sdkapi.GetPatchBaseline(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "GetPatchBaseline", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.ApprovalRules != nil {
		f0 := &svcapitypes.PatchRuleGroup{}
		if resp.ApprovalRules.PatchRules != nil {
			f0f0 := []*svcapitypes.PatchRule{}
			for _, f0f0iter := range resp.ApprovalRules.PatchRules {
				f0f0elem := &svcapitypes.PatchRule{}
				if f0f0iter.ApproveAfterDays != nil {
					approveAfterDaysCopy := int64(*f0f0iter.ApproveAfterDays)
					f0f0elem.ApproveAfterDays = &approveAfterDaysCopy
				}
				if f0f0iter.ApproveUntilDate != nil {
					f0f0elem.ApproveUntilDate = f0f0iter.ApproveUntilDate
				}
				if f0f0iter.ComplianceLevel != "" {
					f0f0elem.ComplianceLevel = aws.String(string(f0f0iter.ComplianceLevel))
				}
				if f0f0iter.EnableNonSecurity != nil {
					f0f0elem.EnableNonSecurity = f0f0iter.EnableNonSecurity
				}
				if f0f0iter.PatchFilterGroup != nil {
					f0f0elemf4 := &svcapitypes.PatchFilterGroup{}
					if f0f0iter.PatchFilterGroup.PatchFilters != nil {
						f0f0elemf4f0 := []*svcapitypes.PatchFilter{}
						for _, f0f0elemf4f0iter := range f0f0iter.PatchFilterGroup.PatchFilters {
							f0f0elemf4f0elem := &svcapitypes.PatchFilter{}
							if f0f0elemf4f0iter.Key != "" {
								f0f0elemf4f0elem.Key = aws.String(string(f0f0elemf4f0iter.Key))
							}
							if f0f0elemf4f0iter.Values != nil {
								f0f0elemf4f0elem.Values = aws.StringSlice(f0f0elemf4f0iter.Values)
							}
							f0f0elemf4f0 = append(f0f0elemf4f0, f0f0elemf4f0elem)
						}
						f0f0elemf4.PatchFilters = f0f0elemf4f0
					}
					f0f0elem.PatchFilterGroup = f0f0elemf4
				}
				f0f0 = append(f0f0, f0f0elem)
			}
			f0.PatchRules = f0f0
		}
		ko.Spec.ApprovalRules = f0
	} else {
		ko.Spec.ApprovalRules = nil
	}
	if resp.ApprovedPatches != nil {
		ko.Spec.ApprovedPatches = aws.StringSlice(resp.ApprovedPatches)
	} else {
		ko.Spec.ApprovedPatches = nil
	}
	if resp.ApprovedPatchesComplianceLevel != "" {
		ko.Spec.ApprovedPatchesComplianceLevel = aws.String(string(resp.ApprovedPatchesComplianceLevel))
	} else {
		ko.Spec.ApprovedPatchesComplianceLevel = nil
	}
	if resp.ApprovedPatchesEnableNonSecurity != nil {
		ko.Spec.ApprovedPatchesEnableNonSecurity = resp.ApprovedPatchesEnableNonSecurity
	} else {
		ko.Spec.ApprovedPatchesEnableNonSecurity = nil
	}
	if resp.BaselineId != nil {
		ko.Status.BaselineID = resp.BaselineId
	} else {
		ko.Status.BaselineID = nil
	}
	if resp.Description != nil {
		ko.Spec.Description = resp.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.GlobalFilters != nil {
		f7 := &svcapitypes.PatchFilterGroup{}
		if resp.GlobalFilters.PatchFilters != nil {
			f7f0 := []*svcapitypes.PatchFilter{}
			for _, f7f0iter := range resp.GlobalFilters.PatchFilters {
				f7f0elem := &svcapitypes.PatchFilter{}
				if f7f0iter.Key != "" {
					f7f0elem.Key = aws.String(string(f7f0iter.Key))
				}
				if f7f0iter.Values != nil {
					f7f0elem.Values = aws.StringSlice(f7f0iter.Values)
				}
				f7f0 = append(f7f0, f7f0elem)
			}
			f7.PatchFilters = f7f0
		}
		ko.Spec.GlobalFilters = f7
	} else {
		ko.Spec.GlobalFilters = nil
	}
	if resp.Name != nil {
		ko.Spec.Name = resp.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.OperatingSystem != "" {
		ko.Spec.OperatingSystem = aws.String(string(resp.OperatingSystem))
	} else {
		ko.Spec.OperatingSystem = nil
	}
	if resp.RejectedPatches != nil {
		ko.Spec.RejectedPatches = aws.StringSlice(resp.RejectedPatches)
	} else {
		ko.Spec.RejectedPatches = nil
	}
	if resp.RejectedPatchesAction != "" {
		ko.Spec.RejectedPatchesAction = aws.String(string(resp.RejectedPatchesAction))
	} else {
		ko.Spec.RejectedPatchesAction = nil
	}
	if resp.Sources != nil {
		f14 := []*svcapitypes.PatchSource{}
		for _, f14iter := range resp.Sources {
			f14elem := &svcapitypes.PatchSource{}
			if f14iter.Configuration != nil {
				f14elem.Configuration = f14iter.Configuration
			}
			if f14iter.Name != nil {
				f14elem.Name = f14iter.Name
			}
			if f14iter.Products != nil {
				f14elem.Products = aws.StringSlice(f14iter.Products)
			}
			f14 = append(f14, f14elem)
		}
		ko.Spec.Sources = f14
	} else {
		ko.Spec.Sources = nil
	}

	rm.setStatusDefaults(ko)
	if ko.Status.BaselineID != nil {
		tags, err := rm.fetchCurrentTags(ctx, ko.Status.BaselineID)
		if err != nil {
			return nil, err
		}
		ko.Spec.Tags = FromACKTags(tags)
	}
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Status.BaselineID == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.GetPatchBaselineInput, error) {
	res := &svcsdk.GetPatchBaselineInput{}

	if r.ko.Status.BaselineID != nil {
		res.BaselineId = r.ko.Status.BaselineID
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreatePatchBaselineOutput
	_ = resp
	resp, err = rm.sdkapi.CreatePatchBaseline(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreatePatchBaseline", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.BaselineId != nil {
		ko.Status.BaselineID = resp.BaselineId
	} else {
		ko.Status.BaselineID = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreatePatchBaselineInput, error) {
	res := &svcsdk.CreatePatchBaselineInput{}

	if r.ko.Spec.ApprovalRules != nil {
		f0 := &svcsdktypes.PatchRuleGroup{}
		if r.ko.Spec.ApprovalRules.PatchRules != nil {
			f0f0 := []svcsdktypes.PatchRule{}
			for _, f0f0iter := range r.ko.Spec.ApprovalRules.PatchRules {
				f0f0elem := &svcsdktypes.PatchRule{}
				if f0f0iter.ApproveAfterDays != nil {
					approveAfterDaysCopy0 := *f0f0iter.ApproveAfterDays
					if approveAfterDaysCopy0 > math.MaxInt32 || approveAfterDaysCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field ApproveAfterDays is of type int32")
					}
					approveAfterDaysCopy := int32(approveAfterDaysCopy0)
					f0f0elem.ApproveAfterDays = &approveAfterDaysCopy
				}
				if f0f0iter.ApproveUntilDate != nil {
					f0f0elem.ApproveUntilDate = f0f0iter.ApproveUntilDate
				}
				if f0f0iter.ComplianceLevel != nil {
					f0f0elem.ComplianceLevel = svcsdktypes.PatchComplianceLevel(*f0f0iter.ComplianceLevel)
				}
				if f0f0iter.EnableNonSecurity != nil {
					f0f0elem.EnableNonSecurity = f0f0iter.EnableNonSecurity
				}
				if f0f0iter.PatchFilterGroup != nil {
					f0f0elemf4 := &svcsdktypes.PatchFilterGroup{}
					if f0f0iter.PatchFilterGroup.PatchFilters != nil {
						f0f0elemf4f0 := []svcsdktypes.PatchFilter{}
						for _, f0f0elemf4f0iter := range f0f0iter.PatchFilterGroup.PatchFilters {
							f0f0elemf4f0elem := &svcsdktypes.PatchFilter{}
							if f0f0elemf4f0iter.Key != nil {
								f0f0elemf4f0elem.Key = svcsdktypes.PatchFilterKey(*f0f0elemf4f0iter.Key)
							}
							if f0f0elemf4f0iter.Values != nil {
								f0f0elemf4f0elem.Values = aws.ToStringSlice(f0f0elemf4f0iter.Values)
							}
							f0f0elemf4f0 = append(f0f0elemf4f0, *f0f0elemf4f0elem)
						}
						f0f0elemf4.PatchFilters = f0f0elemf4f0
					}
					f0f0elem.PatchFilterGroup = f0f0elemf4
				}
				f0f0 = append(f0f0, *f0f0elem)
			}
			f0.PatchRules = f0f0
		}
		res.ApprovalRules = f0
	}
	if r.ko.Spec.ApprovedPatches != nil {
		res.ApprovedPatches = aws.ToStringSlice(r.ko.Spec.ApprovedPatches)
	}
	if r.ko.Spec.ApprovedPatchesComplianceLevel != nil {
		res.ApprovedPatchesComplianceLevel = svcsdktypes.PatchComplianceLevel(*r.ko.Spec.ApprovedPatchesComplianceLevel)
	}
	if r.ko.Spec.ApprovedPatchesEnableNonSecurity != nil {
		res.ApprovedPatchesEnableNonSecurity = r.ko.Spec.ApprovedPatchesEnableNonSecurity
	}
	if r.ko.Spec.ClientToken != nil {
		res.ClientToken = r.ko.Spec.ClientToken
	}
	if r.ko.Spec.Description != nil {
		res.Description = r.ko.Spec.Description
	}
	if r.ko.Spec.GlobalFilters != nil {
		f6 := &svcsdktypes.PatchFilterGroup{}
		if r.ko.Spec.GlobalFilters.PatchFilters != nil {
			f6f0 := []svcsdktypes.PatchFilter{}
			for _, f6f0iter := range r.ko.Spec.GlobalFilters.PatchFilters {
				f6f0elem := &svcsdktypes.PatchFilter{}
				if f6f0iter.Key != nil {
					f6f0elem.Key = svcsdktypes.PatchFilterKey(*f6f0iter.Key)
				}
				if f6f0iter.Values != nil {
					f6f0elem.Values = aws.ToStringSlice(f6f0iter.Values)
				}
				f6f0 = append(f6f0, *f6f0elem)
			}
			f6.PatchFilters = f6f0
		}
		res.GlobalFilters = f6
	}
	if r.ko.Spec.Name != nil {
		res.Name = r.ko.Spec.Name
	}
	if r.ko.Spec.OperatingSystem != nil {
		res.OperatingSystem = svcsdktypes.OperatingSystem(*r.ko.Spec.OperatingSystem)
	}
	if r.ko.Spec.RejectedPatches != nil {
		res.RejectedPatches = aws.ToStringSlice(r.ko.Spec.RejectedPatches)
	}
	if r.ko.Spec.RejectedPatchesAction != nil {
		res.RejectedPatchesAction = svcsdktypes.PatchAction(*r.ko.Spec.RejectedPatchesAction)
	}
	if r.ko.Spec.Sources != nil {
		f11 := []svcsdktypes.PatchSource{}
		for _, f11iter := range r.ko.Spec.Sources {
			f11elem := &svcsdktypes.PatchSource{}
			if f11iter.Configuration != nil {
				f11elem.Configuration = f11iter.Configuration
			}
			if f11iter.Name != nil {
				f11elem.Name = f11iter.Name
			}
			if f11iter.Products != nil {
				f11elem.Products = aws.ToStringSlice(f11iter.Products)
			}
			f11 = append(f11, *f11elem)
		}
		res.Sources = f11
	}
	if r.ko.Spec.Tags != nil {
		f12 := []svcsdktypes.Tag{}
		for _, f12iter := range r.ko.Spec.Tags {
			f12elem := &svcsdktypes.Tag{}
			if f12iter.Key != nil {
				f12elem.Key = f12iter.Key
			}
			if f12iter.Value != nil {
				f12elem.Value = f12iter.Value
			}
			f12 = append(f12, *f12elem)
		}
		res.Tags = f12
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if delta.DifferentAt("Spec.Tags") {
		err = rm.syncTags(ctx, desired, latest)
		if err != nil {
			return nil, err
		}
	}

	if !delta.DifferentExcept("Spec.Tags") {
		return desired, nil
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdatePatchBaselineOutput
	_ = resp
	resp, err = rm.sdkapi.UpdatePatchBaseline(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdatePatchBaseline", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.ApprovalRules != nil {
		f0 := &svcapitypes.PatchRuleGroup{}
		if resp.ApprovalRules.PatchRules != nil {
			f0f0 := []*svcapitypes.PatchRule{}
			for _, f0f0iter := range resp.ApprovalRules.PatchRules {
				f0f0elem := &svcapitypes.PatchRule{}
				if f0f0iter.ApproveAfterDays != nil {
					approveAfterDaysCopy := int64(*f0f0iter.ApproveAfterDays)
					f0f0elem.ApproveAfterDays = &approveAfterDaysCopy
				}
				if f0f0iter.ApproveUntilDate != nil {
					f0f0elem.ApproveUntilDate = f0f0iter.ApproveUntilDate
				}
				if f0f0iter.ComplianceLevel != "" {
					f0f0elem.ComplianceLevel = aws.String(string(f0f0iter.ComplianceLevel))
				}
				if f0f0iter.EnableNonSecurity != nil {
					f0f0elem.EnableNonSecurity = f0f0iter.EnableNonSecurity
				}
				if f0f0iter.PatchFilterGroup != nil {
					f0f0elemf4 := &svcapitypes.PatchFilterGroup{}
					if f0f0iter.PatchFilterGroup.PatchFilters != nil {
						f0f0elemf4f0 := []*svcapitypes.PatchFilter{}
						for _, f0f0elemf4f0iter := range f0f0iter.PatchFilterGroup.PatchFilters {
							f0f0elemf4f0elem := &svcapitypes.PatchFilter{}
							if f0f0elemf4f0iter.Key != "" {
								f0f0elemf4f0elem.Key = aws.String(string(f0f0elemf4f0iter.Key))
							}
							if f0f0elemf4f0iter.Values != nil {
								f0f0elemf4f0elem.Values = aws.StringSlice(f0f0elemf4f0iter.Values)
							}
							f0f0elemf4f0 = append(f0f0elemf4f0, f0f0elemf4f0elem)
						}
						f0f0elemf4.PatchFilters = f0f0elemf4f0
					}
					f0f0elem.PatchFilterGroup = f0f0elemf4
				}
				f0f0 = append(f0f0, f0f0elem)
			}
			f0.PatchRules = f0f0
		}
		ko.Spec.ApprovalRules = f0
	} else {
		ko.Spec.ApprovalRules = nil
	}
	if resp.ApprovedPatches != nil {
		ko.Spec.ApprovedPatches = aws.StringSlice(resp.ApprovedPatches)
	} else {
		ko.Spec.ApprovedPatches = nil
	}
	if resp.ApprovedPatchesComplianceLevel != "" {
		ko.Spec.ApprovedPatchesComplianceLevel = aws.String(string(resp.ApprovedPatchesComplianceLevel))
	} else {
		ko.Spec.ApprovedPatchesComplianceLevel = nil
	}
	if resp.ApprovedPatchesEnableNonSecurity != nil {
		ko.Spec.ApprovedPatchesEnableNonSecurity = resp.ApprovedPatchesEnableNonSecurity
	} else {
		ko.Spec.ApprovedPatchesEnableNonSecurity = nil
	}
	if resp.BaselineId != nil {
		ko.Status.BaselineID = resp.BaselineId
	} else {
		ko.Status.BaselineID = nil
	}
	if resp.Description != nil {
		ko.Spec.Description = resp.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.GlobalFilters != nil {
		f7 := &svcapitypes.PatchFilterGroup{}
		if resp.GlobalFilters.PatchFilters != nil {
			f7f0 := []*svcapitypes.PatchFilter{}
			for _, f7f0iter := range resp.GlobalFilters.PatchFilters {
				f7f0elem := &svcapitypes.PatchFilter{}
				if f7f0iter.Key != "" {
					f7f0elem.Key = aws.String(string(f7f0iter.Key))
				}
				if f7f0iter.Values != nil {
					f7f0elem.Values = aws.StringSlice(f7f0iter.Values)
				}
				f7f0 = append(f7f0, f7f0elem)
			}
			f7.PatchFilters = f7f0
		}
		ko.Spec.GlobalFilters = f7
	} else {
		ko.Spec.GlobalFilters = nil
	}
	if resp.Name != nil {
		ko.Spec.Name = resp.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.OperatingSystem != "" {
		ko.Spec.OperatingSystem = aws.String(string(resp.OperatingSystem))
	} else {
		ko.Spec.OperatingSystem = nil
	}
	if resp.RejectedPatches != nil {
		ko.Spec.RejectedPatches = aws.StringSlice(resp.RejectedPatches)
	} else {
		ko.Spec.RejectedPatches = nil
	}
	if resp.RejectedPatchesAction != "" {
		ko.Spec.RejectedPatchesAction = aws.String(string(resp.RejectedPatchesAction))
	} else {
		ko.Spec.RejectedPatchesAction = nil
	}
	if resp.Sources != nil {
		f13 := []*svcapitypes.PatchSource{}
		for _, f13iter := range resp.Sources {
			f13elem := &svcapitypes.PatchSource{}
			if f13iter.Configuration != nil {
				f13elem.Configuration = f13iter.Configuration
			}
			if f13iter.Name != nil {
				f13elem.Name = f13iter.Name
			}
			if f13iter.Products != nil {
				f13elem.Products = aws.StringSlice(f13iter.Products)
			}
			f13 = append(f13, f13elem)
		}
		ko.Spec.Sources = f13
	} else {
		ko.Spec.Sources = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdatePatchBaselineInput, error) {
	res := &svcsdk.UpdatePatchBaselineInput{}

	if r.ko.Spec.ApprovalRules != nil {
		f0 := &svcsdktypes.PatchRuleGroup{}
		if r.ko.Spec.ApprovalRules.PatchRules != nil {
			f0f0 := []svcsdktypes.PatchRule{}
			for _, f0f0iter := range r.ko.Spec.ApprovalRules.PatchRules {
				f0f0elem := &svcsdktypes.PatchRule{}
				if f0f0iter.ApproveAfterDays != nil {
					approveAfterDaysCopy0 := *f0f0iter.ApproveAfterDays
					if approveAfterDaysCopy0 > math.MaxInt32 || approveAfterDaysCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field ApproveAfterDays is of type int32")
					}
					approveAfterDaysCopy := int32(approveAfterDaysCopy0)
					f0f0elem.ApproveAfterDays = &approveAfterDaysCopy
				}
				if f0f0iter.ApproveUntilDate != nil {
					f0f0elem.ApproveUntilDate = f0f0iter.ApproveUntilDate
				}
				if f0f0iter.ComplianceLevel != nil {
					f0f0elem.ComplianceLevel = svcsdktypes.PatchComplianceLevel(*f0f0iter.ComplianceLevel)
				}
				if f0f0iter.EnableNonSecurity != nil {
					f0f0elem.EnableNonSecurity = f0f0iter.EnableNonSecurity
				}
				if f0f0iter.PatchFilterGroup != nil {
					f0f0elemf4 := &svcsdktypes.PatchFilterGroup{}
					if f0f0iter.PatchFilterGroup.PatchFilters != nil {
						f0f0elemf4f0 := []svcsdktypes.PatchFilter{}
						for _, f0f0elemf4f0iter := range f0f0iter.PatchFilterGroup.PatchFilters {
							f0f0elemf4f0elem := &svcsdktypes.PatchFilter{}
							if f0f0elemf4f0iter.Key != nil {
								f0f0elemf4f0elem.Key = svcsdktypes.PatchFilterKey(*f0f0elemf4f0iter.Key)
							}
							if f0f0elemf4f0iter.Values != nil {
								f0f0elemf4f0elem.Values = aws.ToStringSlice(f0f0elemf4f0iter.Values)
							}
							f0f0elemf4f0 = append(f0f0elemf4f0, *f0f0elemf4f0elem)
						}
						f0f0elemf4.PatchFilters = f0f0elemf4f0
					}
					f0f0elem.PatchFilterGroup = f0f0elemf4
				}
				f0f0 = append(f0f0, *f0f0elem)
			}
			f0.PatchRules = f0f0
		}
		res.ApprovalRules = f0
	}
	if r.ko.Spec.ApprovedPatches != nil {
		res.ApprovedPatches = aws.ToStringSlice(r.ko.Spec.ApprovedPatches)
	}
	if r.ko.Spec.ApprovedPatchesComplianceLevel != nil {
		res.ApprovedPatchesComplianceLevel = svcsdktypes.PatchComplianceLevel(*r.ko.Spec.ApprovedPatchesComplianceLevel)
	}
	if r.ko.Spec.ApprovedPatchesEnableNonSecurity != nil {
		res.ApprovedPatchesEnableNonSecurity = r.ko.Spec.ApprovedPatchesEnableNonSecurity
	}
	if r.ko.Status.BaselineID != nil {
		res.BaselineId = r.ko.Status.BaselineID
	}
	if r.ko.Spec.Description != nil {
		res.Description = r.ko.Spec.Description
	}
	if r.ko.Spec.GlobalFilters != nil {
		f6 := &svcsdktypes.PatchFilterGroup{}
		if r.ko.Spec.GlobalFilters.PatchFilters != nil {
			f6f0 := []svcsdktypes.PatchFilter{}
			for _, f6f0iter := range r.ko.Spec.GlobalFilters.PatchFilters {
				f6f0elem := &svcsdktypes.PatchFilter{}
				if f6f0iter.Key != nil {
					f6f0elem.Key = svcsdktypes.PatchFilterKey(*f6f0iter.Key)
				}
				if f6f0iter.Values != nil {
					f6f0elem.Values = aws.ToStringSlice(f6f0iter.Values)
				}
				f6f0 = append(f6f0, *f6f0elem)
			}
			f6.PatchFilters = f6f0
		}
		res.GlobalFilters = f6
	}
	if r.ko.Spec.Name != nil {
		res.Name = r.ko.Spec.Name
	}
	if r.ko.Spec.RejectedPatches != nil {
		res.RejectedPatches = aws.ToStringSlice(r.ko.Spec.RejectedPatches)
	}
	if r.ko.Spec.RejectedPatchesAction != nil {
		res.RejectedPatchesAction = svcsdktypes.PatchAction(*r.ko.Spec.RejectedPatchesAction)
	}
	if r.ko.Spec.Sources != nil {
		f11 := []svcsdktypes.PatchSource{}
		for _, f11iter := range r.ko.Spec.Sources {
			f11elem := &svcsdktypes.PatchSource{}
			if f11iter.Configuration != nil {
				f11elem.Configuration = f11iter.Configuration
			}
			if f11iter.Name != nil {
				f11elem.Name = f11iter.Name
			}
			if f11iter.Products != nil {
				f11elem.Products = aws.ToStringSlice(f11iter.Products)
			}
			f11 = append(f11, *f11elem)
		}
		res.Sources = f11
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeletePatchBaselineOutput
	_ = resp
	resp, err = rm.sdkapi.DeletePatchBaseline(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeletePatchBaseline", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeletePatchBaselineInput, error) {
	res := &svcsdk.DeletePatchBaselineInput{}

	if r.ko.Status.BaselineID != nil {
		res.BaselineId = r.ko.Status.BaselineID
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.PatchBaseline,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
