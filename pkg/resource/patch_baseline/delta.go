// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package patch_baseline

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.ApprovalRules, b.ko.Spec.ApprovalRules) {
		delta.Add("Spec.ApprovalRules", a.ko.Spec.ApprovalRules, b.ko.Spec.ApprovalRules)
	} else if a.ko.Spec.ApprovalRules != nil && b.ko.Spec.ApprovalRules != nil {
		if len(a.ko.Spec.ApprovalRules.PatchRules) != len(b.ko.Spec.ApprovalRules.PatchRules) {
			delta.Add("Spec.ApprovalRules.PatchRules", a.ko.Spec.ApprovalRules.PatchRules, b.ko.Spec.ApprovalRules.PatchRules)
		} else if len(a.ko.Spec.ApprovalRules.PatchRules) > 0 {
			if !reflect.DeepEqual(a.ko.Spec.ApprovalRules.PatchRules, b.ko.Spec.ApprovalRules.PatchRules) {
				delta.Add("Spec.ApprovalRules.PatchRules", a.ko.Spec.ApprovalRules.PatchRules, b.ko.Spec.ApprovalRules.PatchRules)
			}
		}
	}
	if len(a.ko.Spec.ApprovedPatches) != len(b.ko.Spec.ApprovedPatches) {
		delta.Add("Spec.ApprovedPatches", a.ko.Spec.ApprovedPatches, b.ko.Spec.ApprovedPatches)
	} else if len(a.ko.Spec.ApprovedPatches) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.ApprovedPatches, b.ko.Spec.ApprovedPatches) {
			delta.Add("Spec.ApprovedPatches", a.ko.Spec.ApprovedPatches, b.ko.Spec.ApprovedPatches)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ApprovedPatchesComplianceLevel, b.ko.Spec.ApprovedPatchesComplianceLevel) {
		delta.Add("Spec.ApprovedPatchesComplianceLevel", a.ko.Spec.ApprovedPatchesComplianceLevel, b.ko.Spec.ApprovedPatchesComplianceLevel)
	} else if a.ko.Spec.ApprovedPatchesComplianceLevel != nil && b.ko.Spec.ApprovedPatchesComplianceLevel != nil {
		if *a.ko.Spec.ApprovedPatchesComplianceLevel != *b.ko.Spec.ApprovedPatchesComplianceLevel {
			delta.Add("Spec.ApprovedPatchesComplianceLevel", a.ko.Spec.ApprovedPatchesComplianceLevel, b.ko.Spec.ApprovedPatchesComplianceLevel)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ApprovedPatchesEnableNonSecurity, b.ko.Spec.ApprovedPatchesEnableNonSecurity) {
		delta.Add("Spec.ApprovedPatchesEnableNonSecurity", a.ko.Spec.ApprovedPatchesEnableNonSecurity, b.ko.Spec.ApprovedPatchesEnableNonSecurity)
	} else if a.ko.Spec.ApprovedPatchesEnableNonSecurity != nil && b.ko.Spec.ApprovedPatchesEnableNonSecurity != nil {
		if *a.ko.Spec.ApprovedPatchesEnableNonSecurity != *b.ko.Spec.ApprovedPatchesEnableNonSecurity {
			delta.Add("Spec.ApprovedPatchesEnableNonSecurity", a.ko.Spec.ApprovedPatchesEnableNonSecurity, b.ko.Spec.ApprovedPatchesEnableNonSecurity)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ClientToken, b.ko.Spec.ClientToken) {
		delta.Add("Spec.ClientToken", a.ko.Spec.ClientToken, b.ko.Spec.ClientToken)
	} else if a.ko.Spec.ClientToken != nil && b.ko.Spec.ClientToken != nil {
		if *a.ko.Spec.ClientToken != *b.ko.Spec.ClientToken {
			delta.Add("Spec.ClientToken", a.ko.Spec.ClientToken, b.ko.Spec.ClientToken)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Description, b.ko.Spec.Description) {
		delta.Add("Spec.Description", a.ko.Spec.Description, b.ko.Spec.Description)
	} else if a.ko.Spec.Description != nil && b.ko.Spec.Description != nil {
		if *a.ko.Spec.Description != *b.ko.Spec.Description {
			delta.Add("Spec.Description", a.ko.Spec.Description, b.ko.Spec.Description)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.GlobalFilters, b.ko.Spec.GlobalFilters) {
		delta.Add("Spec.GlobalFilters", a.ko.Spec.GlobalFilters, b.ko.Spec.GlobalFilters)
	} else if a.ko.Spec.GlobalFilters != nil && b.ko.Spec.GlobalFilters != nil {
		if len(a.ko.Spec.GlobalFilters.PatchFilters) != len(b.ko.Spec.GlobalFilters.PatchFilters) {
			delta.Add("Spec.GlobalFilters.PatchFilters", a.ko.Spec.GlobalFilters.PatchFilters, b.ko.Spec.GlobalFilters.PatchFilters)
		} else if len(a.ko.Spec.GlobalFilters.PatchFilters) > 0 {
			if !reflect.DeepEqual(a.ko.Spec.GlobalFilters.PatchFilters, b.ko.Spec.GlobalFilters.PatchFilters) {
				delta.Add("Spec.GlobalFilters.PatchFilters", a.ko.Spec.GlobalFilters.PatchFilters, b.ko.Spec.GlobalFilters.PatchFilters)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Name, b.ko.Spec.Name) {
		delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
	} else if a.ko.Spec.Name != nil && b.ko.Spec.Name != nil {
		if *a.ko.Spec.Name != *b.ko.Spec.Name {
			delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.OperatingSystem, b.ko.Spec.OperatingSystem) {
		delta.Add("Spec.OperatingSystem", a.ko.Spec.OperatingSystem, b.ko.Spec.OperatingSystem)
	} else if a.ko.Spec.OperatingSystem != nil && b.ko.Spec.OperatingSystem != nil {
		if *a.ko.Spec.OperatingSystem != *b.ko.Spec.OperatingSystem {
			delta.Add("Spec.OperatingSystem", a.ko.Spec.OperatingSystem, b.ko.Spec.OperatingSystem)
		}
	}
	if len(a.ko.Spec.RejectedPatches) != len(b.ko.Spec.RejectedPatches) {
		delta.Add("Spec.RejectedPatches", a.ko.Spec.RejectedPatches, b.ko.Spec.RejectedPatches)
	} else if len(a.ko.Spec.RejectedPatches) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.RejectedPatches, b.ko.Spec.RejectedPatches) {
			delta.Add("Spec.RejectedPatches", a.ko.Spec.RejectedPatches, b.ko.Spec.RejectedPatches)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.RejectedPatchesAction, b.ko.Spec.RejectedPatchesAction) {
		delta.Add("Spec.RejectedPatchesAction", a.ko.Spec.RejectedPatchesAction, b.ko.Spec.RejectedPatchesAction)
	} else if a.ko.Spec.RejectedPatchesAction != nil && b.ko.Spec.RejectedPatchesAction != nil {
		if *a.ko.Spec.RejectedPatchesAction != *b.ko.Spec.RejectedPatchesAction {
			delta.Add("Spec.RejectedPatchesAction", a.ko.Spec.RejectedPatchesAction, b.ko.Spec.RejectedPatchesAction)
		}
	}
	if len(a.ko.Spec.Sources) != len(b.ko.Spec.Sources) {
		delta.Add("Spec.Sources", a.ko.Spec.Sources, b.ko.Spec.Sources)
	} else if len(a.ko.Spec.Sources) > 0 {
		if !reflect.DeepEqual(a.ko.Spec.Sources, b.ko.Spec.Sources) {
			delta.Add("Spec.Sources", a.ko.Spec.Sources, b.ko.Spec.Sources)
		}
	}
	if !ackcompare.MapStringStringEqual(ToACKTags(a.ko.Spec.Tags), ToACKTags(b.ko.Spec.Tags)) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	}

	return delta
}
