// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package document

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if len(a.ko.Spec.Attachments) != len(b.ko.Spec.Attachments) {
		delta.Add("Spec.Attachments", a.ko.Spec.Attachments, b.ko.Spec.Attachments)
	} else if len(a.ko.Spec.Attachments) > 0 {
		if !reflect.DeepEqual(a.ko.Spec.Attachments, b.ko.Spec.Attachments) {
			delta.Add("Spec.Attachments", a.ko.Spec.Attachments, b.ko.Spec.Attachments)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Content, b.ko.Spec.Content) {
		delta.Add("Spec.Content", a.ko.Spec.Content, b.ko.Spec.Content)
	} else if a.ko.Spec.Content != nil && b.ko.Spec.Content != nil {
		if *a.ko.Spec.Content != *b.ko.Spec.Content {
			delta.Add("Spec.Content", a.ko.Spec.Content, b.ko.Spec.Content)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DisplayName, b.ko.Spec.DisplayName) {
		delta.Add("Spec.DisplayName", a.ko.Spec.DisplayName, b.ko.Spec.DisplayName)
	} else if a.ko.Spec.DisplayName != nil && b.ko.Spec.DisplayName != nil {
		if *a.ko.Spec.DisplayName != *b.ko.Spec.DisplayName {
			delta.Add("Spec.DisplayName", a.ko.Spec.DisplayName, b.ko.Spec.DisplayName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DocumentFormat, b.ko.Spec.DocumentFormat) {
		delta.Add("Spec.DocumentFormat", a.ko.Spec.DocumentFormat, b.ko.Spec.DocumentFormat)
	} else if a.ko.Spec.DocumentFormat != nil && b.ko.Spec.DocumentFormat != nil {
		if *a.ko.Spec.DocumentFormat != *b.ko.Spec.DocumentFormat {
			delta.Add("Spec.DocumentFormat", a.ko.Spec.DocumentFormat, b.ko.Spec.DocumentFormat)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DocumentType, b.ko.Spec.DocumentType) {
		delta.Add("Spec.DocumentType", a.ko.Spec.DocumentType, b.ko.Spec.DocumentType)
	} else if a.ko.Spec.DocumentType != nil && b.ko.Spec.DocumentType != nil {
		if *a.ko.Spec.DocumentType != *b.ko.Spec.DocumentType {
			delta.Add("Spec.DocumentType", a.ko.Spec.DocumentType, b.ko.Spec.DocumentType)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Name, b.ko.Spec.Name) {
		delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
	} else if a.ko.Spec.Name != nil && b.ko.Spec.Name != nil {
		if *a.ko.Spec.Name != *b.ko.Spec.Name {
			delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
		}
	}
	if len(a.ko.Spec.Requires) != len(b.ko.Spec.Requires) {
		delta.Add("Spec.Requires", a.ko.Spec.Requires, b.ko.Spec.Requires)
	} else if len(a.ko.Spec.Requires) > 0 {
		if !reflect.DeepEqual(a.ko.Spec.Requires, b.ko.Spec.Requires) {
			delta.Add("Spec.Requires", a.ko.Spec.Requires, b.ko.Spec.Requires)
		}
	}
	desiredACKTags, _ := convertToOrderedACKTags(a.ko.Spec.Tags)
	latestACKTags, _ := convertToOrderedACKTags(b.ko.Spec.Tags)
	if !ackcompare.MapStringStringEqual(desiredACKTags, latestACKTags) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.TargetType, b.ko.Spec.TargetType) {
		delta.Add("Spec.TargetType", a.ko.Spec.TargetType, b.ko.Spec.TargetType)
	} else if a.ko.Spec.TargetType != nil && b.ko.Spec.TargetType != nil {
		if *a.ko.Spec.TargetType != *b.ko.Spec.TargetType {
			delta.Add("Spec.TargetType", a.ko.Spec.TargetType, b.ko.Spec.TargetType)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.VersionName, b.ko.Spec.VersionName) {
		delta.Add("Spec.VersionName", a.ko.Spec.VersionName, b.ko.Spec.VersionName)
	} else if a.ko.Spec.VersionName != nil && b.ko.Spec.VersionName != nil {
		if *a.ko.Spec.VersionName != *b.ko.Spec.VersionName {
			delta.Add("Spec.VersionName", a.ko.Spec.VersionName, b.ko.Spec.VersionName)
		}
	}

	return delta
}
