// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package document

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/ssm"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ssm-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.SSM{}
	_ = &svcapitypes.Document{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeDocumentOutput
	resp, err = rm.sdkapi.DescribeDocumentWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeDocument", err)
	if err != nil {
		if reqErr, ok := ackerr.AWSRequestFailure(err); ok && reqErr.StatusCode() == 404 {
			return nil, ackerr.NotFound
		}
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.Document.ApprovedVersion != nil {
		ko.Status.ApprovedVersion = resp.Document.ApprovedVersion
	} else {
		ko.Status.ApprovedVersion = nil
	}
	if resp.Document.AttachmentsInformation != nil {
		f1 := []*svcapitypes.AttachmentInformation{}
		for _, f1iter := range resp.Document.AttachmentsInformation {
			f1elem := &svcapitypes.AttachmentInformation{}
			if f1iter.Name != nil {
				f1elem.Name = f1iter.Name
			}
			f1 = append(f1, f1elem)
		}
		ko.Status.AttachmentsInformation = f1
	} else {
		ko.Status.AttachmentsInformation = nil
	}
	if resp.Document.Author != nil {
		ko.Status.Author = resp.Document.Author
	} else {
		ko.Status.Author = nil
	}
	if resp.Document.Category != nil {
		f3 := []*string{}
		for _, f3iter := range resp.Document.Category {
			var f3elem string
			f3elem = *f3iter
			f3 = append(f3, &f3elem)
		}
		ko.Status.Category = f3
	} else {
		ko.Status.Category = nil
	}
	if resp.Document.CategoryEnum != nil {
		f4 := []*string{}
		for _, f4iter := range resp.Document.CategoryEnum {
			var f4elem string
			f4elem = *f4iter
			f4 = append(f4, &f4elem)
		}
		ko.Status.CategoryEnum = f4
	} else {
		ko.Status.CategoryEnum = nil
	}
	if resp.Document.CreatedDate != nil {
		ko.Status.CreatedDate = &metav1.Time{*resp.Document.CreatedDate}
	} else {
		ko.Status.CreatedDate = nil
	}
	if resp.Document.DefaultVersion != nil {
		ko.Status.DefaultVersion = resp.Document.DefaultVersion
	} else {
		ko.Status.DefaultVersion = nil
	}
	if resp.Document.Description != nil {
		ko.Status.Description = resp.Document.Description
	} else {
		ko.Status.Description = nil
	}
	if resp.Document.DisplayName != nil {
		ko.Spec.DisplayName = resp.Document.DisplayName
	} else {
		ko.Spec.DisplayName = nil
	}
	if resp.Document.DocumentFormat != nil {
		ko.Spec.DocumentFormat = resp.Document.DocumentFormat
	} else {
		ko.Spec.DocumentFormat = nil
	}
	if resp.Document.DocumentType != nil {
		ko.Spec.DocumentType = resp.Document.DocumentType
	} else {
		ko.Spec.DocumentType = nil
	}
	if resp.Document.DocumentVersion != nil {
		ko.Status.DocumentVersion = resp.Document.DocumentVersion
	} else {
		ko.Status.DocumentVersion = nil
	}
	if resp.Document.Hash != nil {
		ko.Status.Hash = resp.Document.Hash
	} else {
		ko.Status.Hash = nil
	}
	if resp.Document.HashType != nil {
		ko.Status.HashType = resp.Document.HashType
	} else {
		ko.Status.HashType = nil
	}
	if resp.Document.LatestVersion != nil {
		ko.Status.LatestVersion = resp.Document.LatestVersion
	} else {
		ko.Status.LatestVersion = nil
	}
	if resp.Document.Name != nil {
		ko.Spec.Name = resp.Document.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.Document.Owner != nil {
		ko.Status.Owner = resp.Document.Owner
	} else {
		ko.Status.Owner = nil
	}
	if resp.Document.Parameters != nil {
		f17 := []*svcapitypes.DocumentParameter{}
		for _, f17iter := range resp.Document.Parameters {
			f17elem := &svcapitypes.DocumentParameter{}
			if f17iter.DefaultValue != nil {
				f17elem.DefaultValue = f17iter.DefaultValue
			}
			if f17iter.Description != nil {
				f17elem.Description = f17iter.Description
			}
			if f17iter.Name != nil {
				f17elem.Name = f17iter.Name
			}
			if f17iter.Type != nil {
				f17elem.Type = f17iter.Type
			}
			f17 = append(f17, f17elem)
		}
		ko.Status.Parameters = f17
	} else {
		ko.Status.Parameters = nil
	}
	if resp.Document.PendingReviewVersion != nil {
		ko.Status.PendingReviewVersion = resp.Document.PendingReviewVersion
	} else {
		ko.Status.PendingReviewVersion = nil
	}
	if resp.Document.PlatformTypes != nil {
		f19 := []*string{}
		for _, f19iter := range resp.Document.PlatformTypes {
			var f19elem string
			f19elem = *f19iter
			f19 = append(f19, &f19elem)
		}
		ko.Status.PlatformTypes = f19
	} else {
		ko.Status.PlatformTypes = nil
	}
	if resp.Document.Requires != nil {
		f20 := []*svcapitypes.DocumentRequires{}
		for _, f20iter := range resp.Document.Requires {
			f20elem := &svcapitypes.DocumentRequires{}
			if f20iter.Name != nil {
				f20elem.Name = f20iter.Name
			}
			if f20iter.RequireType != nil {
				f20elem.RequireType = f20iter.RequireType
			}
			if f20iter.Version != nil {
				f20elem.Version = f20iter.Version
			}
			if f20iter.VersionName != nil {
				f20elem.VersionName = f20iter.VersionName
			}
			f20 = append(f20, f20elem)
		}
		ko.Spec.Requires = f20
	} else {
		ko.Spec.Requires = nil
	}
	if resp.Document.ReviewInformation != nil {
		f21 := []*svcapitypes.ReviewInformation{}
		for _, f21iter := range resp.Document.ReviewInformation {
			f21elem := &svcapitypes.ReviewInformation{}
			if f21iter.ReviewedTime != nil {
				f21elem.ReviewedTime = &metav1.Time{*f21iter.ReviewedTime}
			}
			if f21iter.Reviewer != nil {
				f21elem.Reviewer = f21iter.Reviewer
			}
			if f21iter.Status != nil {
				f21elem.Status = f21iter.Status
			}
			f21 = append(f21, f21elem)
		}
		ko.Status.ReviewInformation = f21
	} else {
		ko.Status.ReviewInformation = nil
	}
	if resp.Document.ReviewStatus != nil {
		ko.Status.ReviewStatus = resp.Document.ReviewStatus
	} else {
		ko.Status.ReviewStatus = nil
	}
	if resp.Document.SchemaVersion != nil {
		ko.Status.SchemaVersion = resp.Document.SchemaVersion
	} else {
		ko.Status.SchemaVersion = nil
	}
	if resp.Document.Sha1 != nil {
		ko.Status.Sha1 = resp.Document.Sha1
	} else {
		ko.Status.Sha1 = nil
	}
	if resp.Document.Status != nil {
		ko.Status.Status = resp.Document.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.Document.StatusInformation != nil {
		ko.Status.StatusInformation = resp.Document.StatusInformation
	} else {
		ko.Status.StatusInformation = nil
	}
	if resp.Document.Tags != nil {
		f27 := []*svcapitypes.Tag{}
		for _, f27iter := range resp.Document.Tags {
			f27elem := &svcapitypes.Tag{}
			if f27iter.Key != nil {
				f27elem.Key = f27iter.Key
			}
			if f27iter.Value != nil {
				f27elem.Value = f27iter.Value
			}
			f27 = append(f27, f27elem)
		}
		ko.Spec.Tags = f27
	} else {
		ko.Spec.Tags = nil
	}
	if resp.Document.TargetType != nil {
		ko.Spec.TargetType = resp.Document.TargetType
	} else {
		ko.Spec.TargetType = nil
	}
	if resp.Document.VersionName != nil {
		ko.Spec.VersionName = resp.Document.VersionName
	} else {
		ko.Spec.VersionName = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.Name == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeDocumentInput, error) {
	res := &svcsdk.DescribeDocumentInput{}

	if r.ko.Status.DocumentVersion != nil {
		res.SetDocumentVersion(*r.ko.Status.DocumentVersion)
	}
	if r.ko.Spec.Name != nil {
		res.SetName(*r.ko.Spec.Name)
	}
	if r.ko.Spec.VersionName != nil {
		res.SetVersionName(*r.ko.Spec.VersionName)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateDocumentOutput
	_ = resp
	resp, err = rm.sdkapi.CreateDocumentWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateDocument", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.DocumentDescription.ApprovedVersion != nil {
		ko.Status.ApprovedVersion = resp.DocumentDescription.ApprovedVersion
	} else {
		ko.Status.ApprovedVersion = nil
	}
	if resp.DocumentDescription.AttachmentsInformation != nil {
		f1 := []*svcapitypes.AttachmentInformation{}
		for _, f1iter := range resp.DocumentDescription.AttachmentsInformation {
			f1elem := &svcapitypes.AttachmentInformation{}
			if f1iter.Name != nil {
				f1elem.Name = f1iter.Name
			}
			f1 = append(f1, f1elem)
		}
		ko.Status.AttachmentsInformation = f1
	} else {
		ko.Status.AttachmentsInformation = nil
	}
	if resp.DocumentDescription.Author != nil {
		ko.Status.Author = resp.DocumentDescription.Author
	} else {
		ko.Status.Author = nil
	}
	if resp.DocumentDescription.Category != nil {
		f3 := []*string{}
		for _, f3iter := range resp.DocumentDescription.Category {
			var f3elem string
			f3elem = *f3iter
			f3 = append(f3, &f3elem)
		}
		ko.Status.Category = f3
	} else {
		ko.Status.Category = nil
	}
	if resp.DocumentDescription.CategoryEnum != nil {
		f4 := []*string{}
		for _, f4iter := range resp.DocumentDescription.CategoryEnum {
			var f4elem string
			f4elem = *f4iter
			f4 = append(f4, &f4elem)
		}
		ko.Status.CategoryEnum = f4
	} else {
		ko.Status.CategoryEnum = nil
	}
	if resp.DocumentDescription.CreatedDate != nil {
		ko.Status.CreatedDate = &metav1.Time{*resp.DocumentDescription.CreatedDate}
	} else {
		ko.Status.CreatedDate = nil
	}
	if resp.DocumentDescription.DefaultVersion != nil {
		ko.Status.DefaultVersion = resp.DocumentDescription.DefaultVersion
	} else {
		ko.Status.DefaultVersion = nil
	}
	if resp.DocumentDescription.Description != nil {
		ko.Status.Description = resp.DocumentDescription.Description
	} else {
		ko.Status.Description = nil
	}
	if resp.DocumentDescription.DisplayName != nil {
		ko.Spec.DisplayName = resp.DocumentDescription.DisplayName
	} else {
		ko.Spec.DisplayName = nil
	}
	if resp.DocumentDescription.DocumentFormat != nil {
		ko.Spec.DocumentFormat = resp.DocumentDescription.DocumentFormat
	} else {
		ko.Spec.DocumentFormat = nil
	}
	if resp.DocumentDescription.DocumentType != nil {
		ko.Spec.DocumentType = resp.DocumentDescription.DocumentType
	} else {
		ko.Spec.DocumentType = nil
	}
	if resp.DocumentDescription.DocumentVersion != nil {
		ko.Status.DocumentVersion = resp.DocumentDescription.DocumentVersion
	} else {
		ko.Status.DocumentVersion = nil
	}
	if resp.DocumentDescription.Hash != nil {
		ko.Status.Hash = resp.DocumentDescription.Hash
	} else {
		ko.Status.Hash = nil
	}
	if resp.DocumentDescription.HashType != nil {
		ko.Status.HashType = resp.DocumentDescription.HashType
	} else {
		ko.Status.HashType = nil
	}
	if resp.DocumentDescription.LatestVersion != nil {
		ko.Status.LatestVersion = resp.DocumentDescription.LatestVersion
	} else {
		ko.Status.LatestVersion = nil
	}
	if resp.DocumentDescription.Name != nil {
		ko.Spec.Name = resp.DocumentDescription.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.DocumentDescription.Owner != nil {
		ko.Status.Owner = resp.DocumentDescription.Owner
	} else {
		ko.Status.Owner = nil
	}
	if resp.DocumentDescription.Parameters != nil {
		f17 := []*svcapitypes.DocumentParameter{}
		for _, f17iter := range resp.DocumentDescription.Parameters {
			f17elem := &svcapitypes.DocumentParameter{}
			if f17iter.DefaultValue != nil {
				f17elem.DefaultValue = f17iter.DefaultValue
			}
			if f17iter.Description != nil {
				f17elem.Description = f17iter.Description
			}
			if f17iter.Name != nil {
				f17elem.Name = f17iter.Name
			}
			if f17iter.Type != nil {
				f17elem.Type = f17iter.Type
			}
			f17 = append(f17, f17elem)
		}
		ko.Status.Parameters = f17
	} else {
		ko.Status.Parameters = nil
	}
	if resp.DocumentDescription.PendingReviewVersion != nil {
		ko.Status.PendingReviewVersion = resp.DocumentDescription.PendingReviewVersion
	} else {
		ko.Status.PendingReviewVersion = nil
	}
	if resp.DocumentDescription.PlatformTypes != nil {
		f19 := []*string{}
		for _, f19iter := range resp.DocumentDescription.PlatformTypes {
			var f19elem string
			f19elem = *f19iter
			f19 = append(f19, &f19elem)
		}
		ko.Status.PlatformTypes = f19
	} else {
		ko.Status.PlatformTypes = nil
	}
	if resp.DocumentDescription.Requires != nil {
		f20 := []*svcapitypes.DocumentRequires{}
		for _, f20iter := range resp.DocumentDescription.Requires {
			f20elem := &svcapitypes.DocumentRequires{}
			if f20iter.Name != nil {
				f20elem.Name = f20iter.Name
			}
			if f20iter.RequireType != nil {
				f20elem.RequireType = f20iter.RequireType
			}
			if f20iter.Version != nil {
				f20elem.Version = f20iter.Version
			}
			if f20iter.VersionName != nil {
				f20elem.VersionName = f20iter.VersionName
			}
			f20 = append(f20, f20elem)
		}
		ko.Spec.Requires = f20
	} else {
		ko.Spec.Requires = nil
	}
	if resp.DocumentDescription.ReviewInformation != nil {
		f21 := []*svcapitypes.ReviewInformation{}
		for _, f21iter := range resp.DocumentDescription.ReviewInformation {
			f21elem := &svcapitypes.ReviewInformation{}
			if f21iter.ReviewedTime != nil {
				f21elem.ReviewedTime = &metav1.Time{*f21iter.ReviewedTime}
			}
			if f21iter.Reviewer != nil {
				f21elem.Reviewer = f21iter.Reviewer
			}
			if f21iter.Status != nil {
				f21elem.Status = f21iter.Status
			}
			f21 = append(f21, f21elem)
		}
		ko.Status.ReviewInformation = f21
	} else {
		ko.Status.ReviewInformation = nil
	}
	if resp.DocumentDescription.ReviewStatus != nil {
		ko.Status.ReviewStatus = resp.DocumentDescription.ReviewStatus
	} else {
		ko.Status.ReviewStatus = nil
	}
	if resp.DocumentDescription.SchemaVersion != nil {
		ko.Status.SchemaVersion = resp.DocumentDescription.SchemaVersion
	} else {
		ko.Status.SchemaVersion = nil
	}
	if resp.DocumentDescription.Sha1 != nil {
		ko.Status.Sha1 = resp.DocumentDescription.Sha1
	} else {
		ko.Status.Sha1 = nil
	}
	if resp.DocumentDescription.Status != nil {
		ko.Status.Status = resp.DocumentDescription.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.DocumentDescription.StatusInformation != nil {
		ko.Status.StatusInformation = resp.DocumentDescription.StatusInformation
	} else {
		ko.Status.StatusInformation = nil
	}
	if resp.DocumentDescription.Tags != nil {
		f27 := []*svcapitypes.Tag{}
		for _, f27iter := range resp.DocumentDescription.Tags {
			f27elem := &svcapitypes.Tag{}
			if f27iter.Key != nil {
				f27elem.Key = f27iter.Key
			}
			if f27iter.Value != nil {
				f27elem.Value = f27iter.Value
			}
			f27 = append(f27, f27elem)
		}
		ko.Spec.Tags = f27
	} else {
		ko.Spec.Tags = nil
	}
	if resp.DocumentDescription.TargetType != nil {
		ko.Spec.TargetType = resp.DocumentDescription.TargetType
	} else {
		ko.Spec.TargetType = nil
	}
	if resp.DocumentDescription.VersionName != nil {
		ko.Spec.VersionName = resp.DocumentDescription.VersionName
	} else {
		ko.Spec.VersionName = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateDocumentInput, error) {
	res := &svcsdk.CreateDocumentInput{}

	if r.ko.Spec.Attachments != nil {
		f0 := []*svcsdk.AttachmentsSource{}
		for _, f0iter := range r.ko.Spec.Attachments {
			f0elem := &svcsdk.AttachmentsSource{}
			if f0iter.Key != nil {
				f0elem.SetKey(*f0iter.Key)
			}
			if f0iter.Name != nil {
				f0elem.SetName(*f0iter.Name)
			}
			if f0iter.Values != nil {
				f0elemf2 := []*string{}
				for _, f0elemf2iter := range f0iter.Values {
					var f0elemf2elem string
					f0elemf2elem = *f0elemf2iter
					f0elemf2 = append(f0elemf2, &f0elemf2elem)
				}
				f0elem.SetValues(f0elemf2)
			}
			f0 = append(f0, f0elem)
		}
		res.SetAttachments(f0)
	}
	if r.ko.Spec.Content != nil {
		res.SetContent(*r.ko.Spec.Content)
	}
	if r.ko.Spec.DisplayName != nil {
		res.SetDisplayName(*r.ko.Spec.DisplayName)
	}
	if r.ko.Spec.DocumentFormat != nil {
		res.SetDocumentFormat(*r.ko.Spec.DocumentFormat)
	}
	if r.ko.Spec.DocumentType != nil {
		res.SetDocumentType(*r.ko.Spec.DocumentType)
	}
	if r.ko.Spec.Name != nil {
		res.SetName(*r.ko.Spec.Name)
	}
	if r.ko.Spec.Requires != nil {
		f6 := []*svcsdk.DocumentRequires{}
		for _, f6iter := range r.ko.Spec.Requires {
			f6elem := &svcsdk.DocumentRequires{}
			if f6iter.Name != nil {
				f6elem.SetName(*f6iter.Name)
			}
			if f6iter.RequireType != nil {
				f6elem.SetRequireType(*f6iter.RequireType)
			}
			if f6iter.Version != nil {
				f6elem.SetVersion(*f6iter.Version)
			}
			if f6iter.VersionName != nil {
				f6elem.SetVersionName(*f6iter.VersionName)
			}
			f6 = append(f6, f6elem)
		}
		res.SetRequires(f6)
	}
	if r.ko.Spec.Tags != nil {
		f7 := []*svcsdk.Tag{}
		for _, f7iter := range r.ko.Spec.Tags {
			f7elem := &svcsdk.Tag{}
			if f7iter.Key != nil {
				f7elem.SetKey(*f7iter.Key)
			}
			if f7iter.Value != nil {
				f7elem.SetValue(*f7iter.Value)
			}
			f7 = append(f7, f7elem)
		}
		res.SetTags(f7)
	}
	if r.ko.Spec.TargetType != nil {
		res.SetTargetType(*r.ko.Spec.TargetType)
	}
	if r.ko.Spec.VersionName != nil {
		res.SetVersionName(*r.ko.Spec.VersionName)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateDocumentOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateDocumentWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateDocument", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.DocumentDescription.ApprovedVersion != nil {
		ko.Status.ApprovedVersion = resp.DocumentDescription.ApprovedVersion
	} else {
		ko.Status.ApprovedVersion = nil
	}
	if resp.DocumentDescription.AttachmentsInformation != nil {
		f1 := []*svcapitypes.AttachmentInformation{}
		for _, f1iter := range resp.DocumentDescription.AttachmentsInformation {
			f1elem := &svcapitypes.AttachmentInformation{}
			if f1iter.Name != nil {
				f1elem.Name = f1iter.Name
			}
			f1 = append(f1, f1elem)
		}
		ko.Status.AttachmentsInformation = f1
	} else {
		ko.Status.AttachmentsInformation = nil
	}
	if resp.DocumentDescription.Author != nil {
		ko.Status.Author = resp.DocumentDescription.Author
	} else {
		ko.Status.Author = nil
	}
	if resp.DocumentDescription.Category != nil {
		f3 := []*string{}
		for _, f3iter := range resp.DocumentDescription.Category {
			var f3elem string
			f3elem = *f3iter
			f3 = append(f3, &f3elem)
		}
		ko.Status.Category = f3
	} else {
		ko.Status.Category = nil
	}
	if resp.DocumentDescription.CategoryEnum != nil {
		f4 := []*string{}
		for _, f4iter := range resp.DocumentDescription.CategoryEnum {
			var f4elem string
			f4elem = *f4iter
			f4 = append(f4, &f4elem)
		}
		ko.Status.CategoryEnum = f4
	} else {
		ko.Status.CategoryEnum = nil
	}
	if resp.DocumentDescription.CreatedDate != nil {
		ko.Status.CreatedDate = &metav1.Time{*resp.DocumentDescription.CreatedDate}
	} else {
		ko.Status.CreatedDate = nil
	}
	if resp.DocumentDescription.DefaultVersion != nil {
		ko.Status.DefaultVersion = resp.DocumentDescription.DefaultVersion
	} else {
		ko.Status.DefaultVersion = nil
	}
	if resp.DocumentDescription.Description != nil {
		ko.Status.Description = resp.DocumentDescription.Description
	} else {
		ko.Status.Description = nil
	}
	if resp.DocumentDescription.DisplayName != nil {
		ko.Spec.DisplayName = resp.DocumentDescription.DisplayName
	} else {
		ko.Spec.DisplayName = nil
	}
	if resp.DocumentDescription.DocumentFormat != nil {
		ko.Spec.DocumentFormat = resp.DocumentDescription.DocumentFormat
	} else {
		ko.Spec.DocumentFormat = nil
	}
	if resp.DocumentDescription.DocumentType != nil {
		ko.Spec.DocumentType = resp.DocumentDescription.DocumentType
	} else {
		ko.Spec.DocumentType = nil
	}
	if resp.DocumentDescription.DocumentVersion != nil {
		ko.Status.DocumentVersion = resp.DocumentDescription.DocumentVersion
	} else {
		ko.Status.DocumentVersion = nil
	}
	if resp.DocumentDescription.Hash != nil {
		ko.Status.Hash = resp.DocumentDescription.Hash
	} else {
		ko.Status.Hash = nil
	}
	if resp.DocumentDescription.HashType != nil {
		ko.Status.HashType = resp.DocumentDescription.HashType
	} else {
		ko.Status.HashType = nil
	}
	if resp.DocumentDescription.LatestVersion != nil {
		ko.Status.LatestVersion = resp.DocumentDescription.LatestVersion
	} else {
		ko.Status.LatestVersion = nil
	}
	if resp.DocumentDescription.Name != nil {
		ko.Spec.Name = resp.DocumentDescription.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.DocumentDescription.Owner != nil {
		ko.Status.Owner = resp.DocumentDescription.Owner
	} else {
		ko.Status.Owner = nil
	}
	if resp.DocumentDescription.Parameters != nil {
		f17 := []*svcapitypes.DocumentParameter{}
		for _, f17iter := range resp.DocumentDescription.Parameters {
			f17elem := &svcapitypes.DocumentParameter{}
			if f17iter.DefaultValue != nil {
				f17elem.DefaultValue = f17iter.DefaultValue
			}
			if f17iter.Description != nil {
				f17elem.Description = f17iter.Description
			}
			if f17iter.Name != nil {
				f17elem.Name = f17iter.Name
			}
			if f17iter.Type != nil {
				f17elem.Type = f17iter.Type
			}
			f17 = append(f17, f17elem)
		}
		ko.Status.Parameters = f17
	} else {
		ko.Status.Parameters = nil
	}
	if resp.DocumentDescription.PendingReviewVersion != nil {
		ko.Status.PendingReviewVersion = resp.DocumentDescription.PendingReviewVersion
	} else {
		ko.Status.PendingReviewVersion = nil
	}
	if resp.DocumentDescription.PlatformTypes != nil {
		f19 := []*string{}
		for _, f19iter := range resp.DocumentDescription.PlatformTypes {
			var f19elem string
			f19elem = *f19iter
			f19 = append(f19, &f19elem)
		}
		ko.Status.PlatformTypes = f19
	} else {
		ko.Status.PlatformTypes = nil
	}
	if resp.DocumentDescription.Requires != nil {
		f20 := []*svcapitypes.DocumentRequires{}
		for _, f20iter := range resp.DocumentDescription.Requires {
			f20elem := &svcapitypes.DocumentRequires{}
			if f20iter.Name != nil {
				f20elem.Name = f20iter.Name
			}
			if f20iter.RequireType != nil {
				f20elem.RequireType = f20iter.RequireType
			}
			if f20iter.Version != nil {
				f20elem.Version = f20iter.Version
			}
			if f20iter.VersionName != nil {
				f20elem.VersionName = f20iter.VersionName
			}
			f20 = append(f20, f20elem)
		}
		ko.Spec.Requires = f20
	} else {
		ko.Spec.Requires = nil
	}
	if resp.DocumentDescription.ReviewInformation != nil {
		f21 := []*svcapitypes.ReviewInformation{}
		for _, f21iter := range resp.DocumentDescription.ReviewInformation {
			f21elem := &svcapitypes.ReviewInformation{}
			if f21iter.ReviewedTime != nil {
				f21elem.ReviewedTime = &metav1.Time{*f21iter.ReviewedTime}
			}
			if f21iter.Reviewer != nil {
				f21elem.Reviewer = f21iter.Reviewer
			}
			if f21iter.Status != nil {
				f21elem.Status = f21iter.Status
			}
			f21 = append(f21, f21elem)
		}
		ko.Status.ReviewInformation = f21
	} else {
		ko.Status.ReviewInformation = nil
	}
	if resp.DocumentDescription.ReviewStatus != nil {
		ko.Status.ReviewStatus = resp.DocumentDescription.ReviewStatus
	} else {
		ko.Status.ReviewStatus = nil
	}
	if resp.DocumentDescription.SchemaVersion != nil {
		ko.Status.SchemaVersion = resp.DocumentDescription.SchemaVersion
	} else {
		ko.Status.SchemaVersion = nil
	}
	if resp.DocumentDescription.Sha1 != nil {
		ko.Status.Sha1 = resp.DocumentDescription.Sha1
	} else {
		ko.Status.Sha1 = nil
	}
	if resp.DocumentDescription.Status != nil {
		ko.Status.Status = resp.DocumentDescription.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.DocumentDescription.StatusInformation != nil {
		ko.Status.StatusInformation = resp.DocumentDescription.StatusInformation
	} else {
		ko.Status.StatusInformation = nil
	}
	if resp.DocumentDescription.Tags != nil {
		f27 := []*svcapitypes.Tag{}
		for _, f27iter := range resp.DocumentDescription.Tags {
			f27elem := &svcapitypes.Tag{}
			if f27iter.Key != nil {
				f27elem.Key = f27iter.Key
			}
			if f27iter.Value != nil {
				f27elem.Value = f27iter.Value
			}
			f27 = append(f27, f27elem)
		}
		ko.Spec.Tags = f27
	} else {
		ko.Spec.Tags = nil
	}
	if resp.DocumentDescription.TargetType != nil {
		ko.Spec.TargetType = resp.DocumentDescription.TargetType
	} else {
		ko.Spec.TargetType = nil
	}
	if resp.DocumentDescription.VersionName != nil {
		ko.Spec.VersionName = resp.DocumentDescription.VersionName
	} else {
		ko.Spec.VersionName = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateDocumentInput, error) {
	res := &svcsdk.UpdateDocumentInput{}

	if r.ko.Spec.Attachments != nil {
		f0 := []*svcsdk.AttachmentsSource{}
		for _, f0iter := range r.ko.Spec.Attachments {
			f0elem := &svcsdk.AttachmentsSource{}
			if f0iter.Key != nil {
				f0elem.SetKey(*f0iter.Key)
			}
			if f0iter.Name != nil {
				f0elem.SetName(*f0iter.Name)
			}
			if f0iter.Values != nil {
				f0elemf2 := []*string{}
				for _, f0elemf2iter := range f0iter.Values {
					var f0elemf2elem string
					f0elemf2elem = *f0elemf2iter
					f0elemf2 = append(f0elemf2, &f0elemf2elem)
				}
				f0elem.SetValues(f0elemf2)
			}
			f0 = append(f0, f0elem)
		}
		res.SetAttachments(f0)
	}
	if r.ko.Spec.Content != nil {
		res.SetContent(*r.ko.Spec.Content)
	}
	if r.ko.Spec.DisplayName != nil {
		res.SetDisplayName(*r.ko.Spec.DisplayName)
	}
	if r.ko.Spec.DocumentFormat != nil {
		res.SetDocumentFormat(*r.ko.Spec.DocumentFormat)
	}
	if r.ko.Status.DocumentVersion != nil {
		res.SetDocumentVersion(*r.ko.Status.DocumentVersion)
	}
	if r.ko.Spec.Name != nil {
		res.SetName(*r.ko.Spec.Name)
	}
	if r.ko.Spec.TargetType != nil {
		res.SetTargetType(*r.ko.Spec.TargetType)
	}
	if r.ko.Spec.VersionName != nil {
		res.SetVersionName(*r.ko.Spec.VersionName)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteDocumentOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteDocumentWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteDocument", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteDocumentInput, error) {
	res := &svcsdk.DeleteDocumentInput{}

	if r.ko.Status.DocumentVersion != nil {
		res.SetDocumentVersion(*r.ko.Status.DocumentVersion)
	}
	if r.ko.Spec.Name != nil {
		res.SetName(*r.ko.Spec.Name)
	}
	if r.ko.Spec.VersionName != nil {
		res.SetVersionName(*r.ko.Spec.VersionName)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Document,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
