// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package resource_data_sync

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.S3Destination, b.ko.Spec.S3Destination) {
		delta.Add("Spec.S3Destination", a.ko.Spec.S3Destination, b.ko.Spec.S3Destination)
	} else if a.ko.Spec.S3Destination != nil && b.ko.Spec.S3Destination != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.S3Destination.AWSKMSKeyARN, b.ko.Spec.S3Destination.AWSKMSKeyARN) {
			delta.Add("Spec.S3Destination.AWSKMSKeyARN", a.ko.Spec.S3Destination.AWSKMSKeyARN, b.ko.Spec.S3Destination.AWSKMSKeyARN)
		} else if a.ko.Spec.S3Destination.AWSKMSKeyARN != nil && b.ko.Spec.S3Destination.AWSKMSKeyARN != nil {
			if *a.ko.Spec.S3Destination.AWSKMSKeyARN != *b.ko.Spec.S3Destination.AWSKMSKeyARN {
				delta.Add("Spec.S3Destination.AWSKMSKeyARN", a.ko.Spec.S3Destination.AWSKMSKeyARN, b.ko.Spec.S3Destination.AWSKMSKeyARN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.S3Destination.BucketName, b.ko.Spec.S3Destination.BucketName) {
			delta.Add("Spec.S3Destination.BucketName", a.ko.Spec.S3Destination.BucketName, b.ko.Spec.S3Destination.BucketName)
		} else if a.ko.Spec.S3Destination.BucketName != nil && b.ko.Spec.S3Destination.BucketName != nil {
			if *a.ko.Spec.S3Destination.BucketName != *b.ko.Spec.S3Destination.BucketName {
				delta.Add("Spec.S3Destination.BucketName", a.ko.Spec.S3Destination.BucketName, b.ko.Spec.S3Destination.BucketName)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.S3Destination.DestinationDataSharing, b.ko.Spec.S3Destination.DestinationDataSharing) {
			delta.Add("Spec.S3Destination.DestinationDataSharing", a.ko.Spec.S3Destination.DestinationDataSharing, b.ko.Spec.S3Destination.DestinationDataSharing)
		} else if a.ko.Spec.S3Destination.DestinationDataSharing != nil && b.ko.Spec.S3Destination.DestinationDataSharing != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.S3Destination.DestinationDataSharing.DestinationDataSharingType, b.ko.Spec.S3Destination.DestinationDataSharing.DestinationDataSharingType) {
				delta.Add("Spec.S3Destination.DestinationDataSharing.DestinationDataSharingType", a.ko.Spec.S3Destination.DestinationDataSharing.DestinationDataSharingType, b.ko.Spec.S3Destination.DestinationDataSharing.DestinationDataSharingType)
			} else if a.ko.Spec.S3Destination.DestinationDataSharing.DestinationDataSharingType != nil && b.ko.Spec.S3Destination.DestinationDataSharing.DestinationDataSharingType != nil {
				if *a.ko.Spec.S3Destination.DestinationDataSharing.DestinationDataSharingType != *b.ko.Spec.S3Destination.DestinationDataSharing.DestinationDataSharingType {
					delta.Add("Spec.S3Destination.DestinationDataSharing.DestinationDataSharingType", a.ko.Spec.S3Destination.DestinationDataSharing.DestinationDataSharingType, b.ko.Spec.S3Destination.DestinationDataSharing.DestinationDataSharingType)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.S3Destination.Prefix, b.ko.Spec.S3Destination.Prefix) {
			delta.Add("Spec.S3Destination.Prefix", a.ko.Spec.S3Destination.Prefix, b.ko.Spec.S3Destination.Prefix)
		} else if a.ko.Spec.S3Destination.Prefix != nil && b.ko.Spec.S3Destination.Prefix != nil {
			if *a.ko.Spec.S3Destination.Prefix != *b.ko.Spec.S3Destination.Prefix {
				delta.Add("Spec.S3Destination.Prefix", a.ko.Spec.S3Destination.Prefix, b.ko.Spec.S3Destination.Prefix)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.S3Destination.Region, b.ko.Spec.S3Destination.Region) {
			delta.Add("Spec.S3Destination.Region", a.ko.Spec.S3Destination.Region, b.ko.Spec.S3Destination.Region)
		} else if a.ko.Spec.S3Destination.Region != nil && b.ko.Spec.S3Destination.Region != nil {
			if *a.ko.Spec.S3Destination.Region != *b.ko.Spec.S3Destination.Region {
				delta.Add("Spec.S3Destination.Region", a.ko.Spec.S3Destination.Region, b.ko.Spec.S3Destination.Region)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.S3Destination.SyncFormat, b.ko.Spec.S3Destination.SyncFormat) {
			delta.Add("Spec.S3Destination.SyncFormat", a.ko.Spec.S3Destination.SyncFormat, b.ko.Spec.S3Destination.SyncFormat)
		} else if a.ko.Spec.S3Destination.SyncFormat != nil && b.ko.Spec.S3Destination.SyncFormat != nil {
			if *a.ko.Spec.S3Destination.SyncFormat != *b.ko.Spec.S3Destination.SyncFormat {
				delta.Add("Spec.S3Destination.SyncFormat", a.ko.Spec.S3Destination.SyncFormat, b.ko.Spec.S3Destination.SyncFormat)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.SyncName, b.ko.Spec.SyncName) {
		delta.Add("Spec.SyncName", a.ko.Spec.SyncName, b.ko.Spec.SyncName)
	} else if a.ko.Spec.SyncName != nil && b.ko.Spec.SyncName != nil {
		if *a.ko.Spec.SyncName != *b.ko.Spec.SyncName {
			delta.Add("Spec.SyncName", a.ko.Spec.SyncName, b.ko.Spec.SyncName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.SyncSource, b.ko.Spec.SyncSource) {
		delta.Add("Spec.SyncSource", a.ko.Spec.SyncSource, b.ko.Spec.SyncSource)
	} else if a.ko.Spec.SyncSource != nil && b.ko.Spec.SyncSource != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.SyncSource.AWSOrganizationsSource, b.ko.Spec.SyncSource.AWSOrganizationsSource) {
			delta.Add("Spec.SyncSource.AWSOrganizationsSource", a.ko.Spec.SyncSource.AWSOrganizationsSource, b.ko.Spec.SyncSource.AWSOrganizationsSource)
		} else if a.ko.Spec.SyncSource.AWSOrganizationsSource != nil && b.ko.Spec.SyncSource.AWSOrganizationsSource != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationSourceType, b.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationSourceType) {
				delta.Add("Spec.SyncSource.AWSOrganizationsSource.OrganizationSourceType", a.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationSourceType, b.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationSourceType)
			} else if a.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationSourceType != nil && b.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationSourceType != nil {
				if *a.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationSourceType != *b.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationSourceType {
					delta.Add("Spec.SyncSource.AWSOrganizationsSource.OrganizationSourceType", a.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationSourceType, b.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationSourceType)
				}
			}
			if len(a.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationalUnits) != len(b.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationalUnits) {
				delta.Add("Spec.SyncSource.AWSOrganizationsSource.OrganizationalUnits", a.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationalUnits, b.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationalUnits)
			} else if len(a.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationalUnits) > 0 {
				if !reflect.DeepEqual(a.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationalUnits, b.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationalUnits) {
					delta.Add("Spec.SyncSource.AWSOrganizationsSource.OrganizationalUnits", a.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationalUnits, b.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationalUnits)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SyncSource.EnableAllOpsDataSources, b.ko.Spec.SyncSource.EnableAllOpsDataSources) {
			delta.Add("Spec.SyncSource.EnableAllOpsDataSources", a.ko.Spec.SyncSource.EnableAllOpsDataSources, b.ko.Spec.SyncSource.EnableAllOpsDataSources)
		} else if a.ko.Spec.SyncSource.EnableAllOpsDataSources != nil && b.ko.Spec.SyncSource.EnableAllOpsDataSources != nil {
			if *a.ko.Spec.SyncSource.EnableAllOpsDataSources != *b.ko.Spec.SyncSource.EnableAllOpsDataSources {
				delta.Add("Spec.SyncSource.EnableAllOpsDataSources", a.ko.Spec.SyncSource.EnableAllOpsDataSources, b.ko.Spec.SyncSource.EnableAllOpsDataSources)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SyncSource.IncludeFutureRegions, b.ko.Spec.SyncSource.IncludeFutureRegions) {
			delta.Add("Spec.SyncSource.IncludeFutureRegions", a.ko.Spec.SyncSource.IncludeFutureRegions, b.ko.Spec.SyncSource.IncludeFutureRegions)
		} else if a.ko.Spec.SyncSource.IncludeFutureRegions != nil && b.ko.Spec.SyncSource.IncludeFutureRegions != nil {
			if *a.ko.Spec.SyncSource.IncludeFutureRegions != *b.ko.Spec.SyncSource.IncludeFutureRegions {
				delta.Add("Spec.SyncSource.IncludeFutureRegions", a.ko.Spec.SyncSource.IncludeFutureRegions, b.ko.Spec.SyncSource.IncludeFutureRegions)
			}
		}
		if len(a.ko.Spec.SyncSource.SourceRegions) != len(b.ko.Spec.SyncSource.SourceRegions) {
			delta.Add("Spec.SyncSource.SourceRegions", a.ko.Spec.SyncSource.SourceRegions, b.ko.Spec.SyncSource.SourceRegions)
		} else if len(a.ko.Spec.SyncSource.SourceRegions) > 0 {
			if !ackcompare.SliceStringPEqual(a.ko.Spec.SyncSource.SourceRegions, b.ko.Spec.SyncSource.SourceRegions) {
				delta.Add("Spec.SyncSource.SourceRegions", a.ko.Spec.SyncSource.SourceRegions, b.ko.Spec.SyncSource.SourceRegions)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.SyncSource.SourceType, b.ko.Spec.SyncSource.SourceType) {
			delta.Add("Spec.SyncSource.SourceType", a.ko.Spec.SyncSource.SourceType, b.ko.Spec.SyncSource.SourceType)
		} else if a.ko.Spec.SyncSource.SourceType != nil && b.ko.Spec.SyncSource.SourceType != nil {
			if *a.ko.Spec.SyncSource.SourceType != *b.ko.Spec.SyncSource.SourceType {
				delta.Add("Spec.SyncSource.SourceType", a.ko.Spec.SyncSource.SourceType, b.ko.Spec.SyncSource.SourceType)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.SyncType, b.ko.Spec.SyncType) {
		delta.Add("Spec.SyncType", a.ko.Spec.SyncType, b.ko.Spec.SyncType)
	} else if a.ko.Spec.SyncType != nil && b.ko.Spec.SyncType != nil {
		if *a.ko.Spec.SyncType != *b.ko.Spec.SyncType {
			delta.Add("Spec.SyncType", a.ko.Spec.SyncType, b.ko.Spec.SyncType)
		}
	}

	return delta
}
