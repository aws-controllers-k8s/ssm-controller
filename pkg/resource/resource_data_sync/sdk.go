// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package resource_data_sync

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/ssm"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ssm-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.SSM{}
	_ = &svcapitypes.ResourceDataSync{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.ListResourceDataSyncOutput
	resp, err = rm.sdkapi.ListResourceDataSyncWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "ListResourceDataSync", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.ResourceDataSyncItems {
		if elem.S3Destination != nil {
			f4 := &svcapitypes.ResourceDataSyncS3Destination{}
			if elem.S3Destination.AWSKMSKeyARN != nil {
				f4.AWSKMSKeyARN = elem.S3Destination.AWSKMSKeyARN
			}
			if elem.S3Destination.BucketName != nil {
				f4.BucketName = elem.S3Destination.BucketName
			}
			if elem.S3Destination.DestinationDataSharing != nil {
				f4f2 := &svcapitypes.ResourceDataSyncDestinationDataSharing{}
				if elem.S3Destination.DestinationDataSharing.DestinationDataSharingType != nil {
					f4f2.DestinationDataSharingType = elem.S3Destination.DestinationDataSharing.DestinationDataSharingType
				}
				f4.DestinationDataSharing = f4f2
			}
			if elem.S3Destination.Prefix != nil {
				f4.Prefix = elem.S3Destination.Prefix
			}
			if elem.S3Destination.Region != nil {
				f4.Region = elem.S3Destination.Region
			}
			if elem.S3Destination.SyncFormat != nil {
				f4.SyncFormat = elem.S3Destination.SyncFormat
			}
			ko.Spec.S3Destination = f4
		} else {
			ko.Spec.S3Destination = nil
		}
		if elem.SyncName != nil {
			ko.Spec.SyncName = elem.SyncName
		} else {
			ko.Spec.SyncName = nil
		}
		if elem.SyncSource != nil {
			f8 := &svcapitypes.ResourceDataSyncSource{}
			if elem.SyncSource.AwsOrganizationsSource != nil {
				f8f0 := &svcapitypes.ResourceDataSyncAWSOrganizationsSource{}
				if elem.SyncSource.AwsOrganizationsSource.OrganizationSourceType != nil {
					f8f0.OrganizationSourceType = elem.SyncSource.AwsOrganizationsSource.OrganizationSourceType
				}
				if elem.SyncSource.AwsOrganizationsSource.OrganizationalUnits != nil {
					f8f0f1 := []*svcapitypes.ResourceDataSyncOrganizationalUnit{}
					for _, f8f0f1iter := range elem.SyncSource.AwsOrganizationsSource.OrganizationalUnits {
						f8f0f1elem := &svcapitypes.ResourceDataSyncOrganizationalUnit{}
						if f8f0f1iter.OrganizationalUnitId != nil {
							f8f0f1elem.OrganizationalUnitID = f8f0f1iter.OrganizationalUnitId
						}
						f8f0f1 = append(f8f0f1, f8f0f1elem)
					}
					f8f0.OrganizationalUnits = f8f0f1
				}
				f8.AWSOrganizationsSource = f8f0
			}
			if elem.SyncSource.EnableAllOpsDataSources != nil {
				f8.EnableAllOpsDataSources = elem.SyncSource.EnableAllOpsDataSources
			}
			if elem.SyncSource.IncludeFutureRegions != nil {
				f8.IncludeFutureRegions = elem.SyncSource.IncludeFutureRegions
			}
			if elem.SyncSource.SourceRegions != nil {
				f8f3 := []*string{}
				for _, f8f3iter := range elem.SyncSource.SourceRegions {
					var f8f3elem string
					f8f3elem = *f8f3iter
					f8f3 = append(f8f3, &f8f3elem)
				}
				f8.SourceRegions = f8f3
			}
			if elem.SyncSource.SourceType != nil {
				f8.SourceType = elem.SyncSource.SourceType
			}
			ko.Spec.SyncSource = f8
		} else {
			ko.Spec.SyncSource = nil
		}
		if elem.SyncType != nil {
			ko.Spec.SyncType = elem.SyncType
		} else {
			ko.Spec.SyncType = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return false
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.ListResourceDataSyncInput, error) {
	res := &svcsdk.ListResourceDataSyncInput{}

	if r.ko.Spec.SyncType != nil {
		res.SetSyncType(*r.ko.Spec.SyncType)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateResourceDataSyncOutput
	_ = resp
	resp, err = rm.sdkapi.CreateResourceDataSyncWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateResourceDataSync", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateResourceDataSyncInput, error) {
	res := &svcsdk.CreateResourceDataSyncInput{}

	if r.ko.Spec.S3Destination != nil {
		f0 := &svcsdk.ResourceDataSyncS3Destination{}
		if r.ko.Spec.S3Destination.AWSKMSKeyARN != nil {
			f0.SetAWSKMSKeyARN(*r.ko.Spec.S3Destination.AWSKMSKeyARN)
		}
		if r.ko.Spec.S3Destination.BucketName != nil {
			f0.SetBucketName(*r.ko.Spec.S3Destination.BucketName)
		}
		if r.ko.Spec.S3Destination.DestinationDataSharing != nil {
			f0f2 := &svcsdk.ResourceDataSyncDestinationDataSharing{}
			if r.ko.Spec.S3Destination.DestinationDataSharing.DestinationDataSharingType != nil {
				f0f2.SetDestinationDataSharingType(*r.ko.Spec.S3Destination.DestinationDataSharing.DestinationDataSharingType)
			}
			f0.SetDestinationDataSharing(f0f2)
		}
		if r.ko.Spec.S3Destination.Prefix != nil {
			f0.SetPrefix(*r.ko.Spec.S3Destination.Prefix)
		}
		if r.ko.Spec.S3Destination.Region != nil {
			f0.SetRegion(*r.ko.Spec.S3Destination.Region)
		}
		if r.ko.Spec.S3Destination.SyncFormat != nil {
			f0.SetSyncFormat(*r.ko.Spec.S3Destination.SyncFormat)
		}
		res.SetS3Destination(f0)
	}
	if r.ko.Spec.SyncName != nil {
		res.SetSyncName(*r.ko.Spec.SyncName)
	}
	if r.ko.Spec.SyncSource != nil {
		f2 := &svcsdk.ResourceDataSyncSource{}
		if r.ko.Spec.SyncSource.AWSOrganizationsSource != nil {
			f2f0 := &svcsdk.ResourceDataSyncAwsOrganizationsSource{}
			if r.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationSourceType != nil {
				f2f0.SetOrganizationSourceType(*r.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationSourceType)
			}
			if r.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationalUnits != nil {
				f2f0f1 := []*svcsdk.ResourceDataSyncOrganizationalUnit{}
				for _, f2f0f1iter := range r.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationalUnits {
					f2f0f1elem := &svcsdk.ResourceDataSyncOrganizationalUnit{}
					if f2f0f1iter.OrganizationalUnitID != nil {
						f2f0f1elem.SetOrganizationalUnitId(*f2f0f1iter.OrganizationalUnitID)
					}
					f2f0f1 = append(f2f0f1, f2f0f1elem)
				}
				f2f0.SetOrganizationalUnits(f2f0f1)
			}
			f2.SetAwsOrganizationsSource(f2f0)
		}
		if r.ko.Spec.SyncSource.EnableAllOpsDataSources != nil {
			f2.SetEnableAllOpsDataSources(*r.ko.Spec.SyncSource.EnableAllOpsDataSources)
		}
		if r.ko.Spec.SyncSource.IncludeFutureRegions != nil {
			f2.SetIncludeFutureRegions(*r.ko.Spec.SyncSource.IncludeFutureRegions)
		}
		if r.ko.Spec.SyncSource.SourceRegions != nil {
			f2f3 := []*string{}
			for _, f2f3iter := range r.ko.Spec.SyncSource.SourceRegions {
				var f2f3elem string
				f2f3elem = *f2f3iter
				f2f3 = append(f2f3, &f2f3elem)
			}
			f2.SetSourceRegions(f2f3)
		}
		if r.ko.Spec.SyncSource.SourceType != nil {
			f2.SetSourceType(*r.ko.Spec.SyncSource.SourceType)
		}
		res.SetSyncSource(f2)
	}
	if r.ko.Spec.SyncType != nil {
		res.SetSyncType(*r.ko.Spec.SyncType)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateResourceDataSyncOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateResourceDataSyncWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateResourceDataSync", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateResourceDataSyncInput, error) {
	res := &svcsdk.UpdateResourceDataSyncInput{}

	if r.ko.Spec.SyncName != nil {
		res.SetSyncName(*r.ko.Spec.SyncName)
	}
	if r.ko.Spec.SyncSource != nil {
		f1 := &svcsdk.ResourceDataSyncSource{}
		if r.ko.Spec.SyncSource.AWSOrganizationsSource != nil {
			f1f0 := &svcsdk.ResourceDataSyncAwsOrganizationsSource{}
			if r.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationSourceType != nil {
				f1f0.SetOrganizationSourceType(*r.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationSourceType)
			}
			if r.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationalUnits != nil {
				f1f0f1 := []*svcsdk.ResourceDataSyncOrganizationalUnit{}
				for _, f1f0f1iter := range r.ko.Spec.SyncSource.AWSOrganizationsSource.OrganizationalUnits {
					f1f0f1elem := &svcsdk.ResourceDataSyncOrganizationalUnit{}
					if f1f0f1iter.OrganizationalUnitID != nil {
						f1f0f1elem.SetOrganizationalUnitId(*f1f0f1iter.OrganizationalUnitID)
					}
					f1f0f1 = append(f1f0f1, f1f0f1elem)
				}
				f1f0.SetOrganizationalUnits(f1f0f1)
			}
			f1.SetAwsOrganizationsSource(f1f0)
		}
		if r.ko.Spec.SyncSource.EnableAllOpsDataSources != nil {
			f1.SetEnableAllOpsDataSources(*r.ko.Spec.SyncSource.EnableAllOpsDataSources)
		}
		if r.ko.Spec.SyncSource.IncludeFutureRegions != nil {
			f1.SetIncludeFutureRegions(*r.ko.Spec.SyncSource.IncludeFutureRegions)
		}
		if r.ko.Spec.SyncSource.SourceRegions != nil {
			f1f3 := []*string{}
			for _, f1f3iter := range r.ko.Spec.SyncSource.SourceRegions {
				var f1f3elem string
				f1f3elem = *f1f3iter
				f1f3 = append(f1f3, &f1f3elem)
			}
			f1.SetSourceRegions(f1f3)
		}
		if r.ko.Spec.SyncSource.SourceType != nil {
			f1.SetSourceType(*r.ko.Spec.SyncSource.SourceType)
		}
		res.SetSyncSource(f1)
	}
	if r.ko.Spec.SyncType != nil {
		res.SetSyncType(*r.ko.Spec.SyncType)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteResourceDataSyncOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteResourceDataSyncWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteResourceDataSync", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteResourceDataSyncInput, error) {
	res := &svcsdk.DeleteResourceDataSyncInput{}

	if r.ko.Spec.SyncName != nil {
		res.SetSyncName(*r.ko.Spec.SyncName)
	}
	if r.ko.Spec.SyncType != nil {
		res.SetSyncType(*r.ko.Spec.SyncType)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.ResourceDataSync,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
