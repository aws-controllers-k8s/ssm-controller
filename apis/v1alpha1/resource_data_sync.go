// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ResourceDataSyncSpec defines the desired state of ResourceDataSync.
type ResourceDataSyncSpec struct {

	// Amazon S3 configuration details for the sync. This parameter is required
	// if the SyncType value is SyncToDestination.
	S3Destination *ResourceDataSyncS3Destination `json:"s3Destination,omitempty"`
	// A name for the configuration.
	// +kubebuilder:validation:Required
	SyncName *string `json:"syncName"`
	// Specify information about the data sources to synchronize. This parameter
	// is required if the SyncType value is SyncFromSource.
	SyncSource *ResourceDataSyncSource `json:"syncSource,omitempty"`
	// Specify SyncToDestination to create a resource data sync that synchronizes
	// data to an S3 bucket for Inventory. If you specify SyncToDestination, you
	// must provide a value for S3Destination. Specify SyncFromSource to synchronize
	// data from a single account and multiple Regions, or multiple Amazon Web Services
	// accounts and Amazon Web Services Regions, as listed in Organizations for
	// Explorer. If you specify SyncFromSource, you must provide a value for SyncSource.
	// The default value is SyncToDestination.
	SyncType *string `json:"syncType,omitempty"`
}

// ResourceDataSyncStatus defines the observed state of ResourceDataSync
type ResourceDataSyncStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
}

// ResourceDataSync is the Schema for the ResourceDataSyncs API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type ResourceDataSync struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ResourceDataSyncSpec   `json:"spec,omitempty"`
	Status            ResourceDataSyncStatus `json:"status,omitempty"`
}

// ResourceDataSyncList contains a list of ResourceDataSync
// +kubebuilder:object:root=true
type ResourceDataSyncList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ResourceDataSync `json:"items"`
}

func init() {
	SchemeBuilder.Register(&ResourceDataSync{}, &ResourceDataSyncList{})
}
