// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// AssociationSpec defines the desired state of Association.
//
// Describes an association of a Amazon Web Services Systems Manager document
// (SSM document) and a managed node.
type AssociationSpec struct {

AlarmConfiguration *AlarmConfiguration `json:"alarmConfiguration,omitempty"`
// By default, when you create a new association, the system runs it immediately
// after it is created and then according to the schedule you specified. Specify
// this option if you don't want an association to run immediately after you
// create it. This parameter isn't supported for rate expressions.
ApplyOnlyAtCronInterval *bool `json:"applyOnlyAtCronInterval,omitempty"`
// Specify a descriptive name for the association.
//
// Regex Pattern: `^[a-zA-Z0-9_\-.]{3,128}$`
AssociationName *string `json:"associationName,omitempty"`
// Choose the parameter that will define how your automation will branch out.
// This target is required for associations that use an Automation runbook and
// target resources by using rate controls. Automation is a capability of Amazon
// Web Services Systems Manager.
AutomationTargetParameterName *string `json:"automationTargetParameterName,omitempty"`
// The names or Amazon Resource Names (ARNs) of the Change Calendar type documents
// you want to gate your associations under. The associations only run when
// that change calendar is open. For more information, see Amazon Web Services
// Systems Manager Change Calendar (https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar).
CalendarNames []*string `json:"calendarNames,omitempty"`
// The severity level to assign to the association.
ComplianceSeverity *string `json:"complianceSeverity,omitempty"`
// The document version you want to associate with the targets. Can be a specific
// version or the default version.
// 
// State Manager doesn't support running associations that use a new version
// of a document if that document is shared from another account. State Manager
// always runs the default version of a document if shared from another account,
// even though the Systems Manager console shows that a new version was processed.
// If you want to run an association using a new version of a document shared
// form another account, you must set the document version to default.
//
// Regex Pattern: `^([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)$`
DocumentVersion *string `json:"documentVersion,omitempty"`
// The number of hours the association can run before it is canceled. Duration
// applies to associations that are currently running, and any pending and in
// progress commands on all targets. If a target was taken offline for the association
// to run, it is made available again immediately, without a reboot.
// 
// The Duration parameter applies only when both these conditions are true:
// 
//    * The association for which you specify a duration is cancelable according
//    to the parameters of the SSM command document or Automation runbook associated
//    with this execution.
// 
//    * The command specifies the ApplyOnlyAtCronInterval (https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_CreateAssociation.html#systemsmanager-CreateAssociation-request-ApplyOnlyAtCronInterval)
//    parameter, which means that the association doesn't run immediately after
//    it is created, but only according to the specified schedule.
Duration *int64 `json:"duration,omitempty"`
// The managed node ID.
// 
// InstanceId has been deprecated. To specify a managed node ID for an association,
// use the Targets parameter. Requests that include the parameter InstanceID
// with Systems Manager documents (SSM documents) that use schema version 2.0
// or later will fail. In addition, if you use the parameter InstanceId, you
// can't use the parameters AssociationName, DocumentVersion, MaxErrors, MaxConcurrency,
// OutputLocation, or ScheduleExpression. To use these parameters, you must
// use the Targets parameter.
//
// Regex Pattern: `^(^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)$`
InstanceID *string `json:"instanceID,omitempty"`
// The maximum number of targets allowed to run the association at the same
// time. You can specify a number, for example 10, or a percentage of the target
// set, for example 10%. The default value is 100%, which means all targets
// run the association at the same time.
// 
// If a new managed node starts and attempts to run an association while Systems
// Manager is running MaxConcurrency associations, the association is allowed
// to run. During the next association interval, the new managed node will process
// its association within the limit specified for MaxConcurrency.
//
// Regex Pattern: `^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$`
MaxConcurrency *string `json:"maxConcurrency,omitempty"`
// The number of errors that are allowed before the system stops sending requests
// to run the association on additional targets. You can specify either an absolute
// number of errors, for example 10, or a percentage of the target set, for
// example 10%. If you specify 3, for example, the system stops sending requests
// when the fourth error is received. If you specify 0, then the system stops
// sending requests after the first error is returned. If you run an association
// on 50 managed nodes and set MaxError to 10%, then the system stops sending
// the request when the sixth error is received.
// 
// Executions that are already running an association when MaxErrors is reached
// are allowed to complete, but some of these executions may fail as well. If
// you need to ensure that there won't be more than max-errors failed executions,
// set MaxConcurrency to 1 so that executions proceed one at a time.
//
// Regex Pattern: `^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$`
MaxErrors *string `json:"maxErrors,omitempty"`
// The name of the SSM Command document or Automation runbook that contains
// the configuration information for the managed node.
// 
// You can specify Amazon Web Services-predefined documents, documents you created,
// or a document that is shared with you from another Amazon Web Services account.
// 
// For Systems Manager documents (SSM documents) that are shared with you from
// other Amazon Web Services accounts, you must specify the complete SSM document
// ARN, in the following format:
// 
// arn:partition:ssm:region:account-id:document/document-name
// 
// For example:
// 
// arn:aws:ssm:us-east-2:12345678912:document/My-Shared-Document
// 
// For Amazon Web Services-predefined documents and SSM documents you created
// in your account, you only need to specify the document name. For example,
// AWS-ApplyPatchBaseline or My-Document.
//
// Regex Pattern: `^[a-zA-Z0-9_\-.:/]{3,128}$`
// +kubebuilder:validation:Required
Name *string `json:"name"`
// An Amazon Simple Storage Service (Amazon S3) bucket where you want to store
// the output details of the request.
OutputLocation *InstanceAssociationOutputLocation `json:"outputLocation,omitempty"`
// The parameters for the runtime configuration of the document.
Parameters map[string][]*string `json:"parameters,omitempty"`
// A cron expression when the association will be applied to the targets.
ScheduleExpression *string `json:"scheduleExpression,omitempty"`
// Number of days to wait after the scheduled day to run an association. For
// example, if you specified a cron schedule of cron(0 0 ? * THU#2 *), you could
// specify an offset of 3 to run the association each Sunday after the second
// Thursday of the month. For more information about cron schedules for associations,
// see Reference: Cron and rate expressions for Systems Manager (https://docs.aws.amazon.com/systems-manager/latest/userguide/reference-cron-and-rate-expressions.html)
// in the Amazon Web Services Systems Manager User Guide.
// 
// To use offsets, you must specify the ApplyOnlyAtCronInterval parameter. This
// option tells the system not to run an association immediately after you create
// it.
ScheduleOffset *int64 `json:"scheduleOffset,omitempty"`
// The mode for generating association compliance. You can specify AUTO or MANUAL.
// In AUTO mode, the system uses the status of the association execution to
// determine the compliance status. If the association execution runs successfully,
// then the association is COMPLIANT. If the association execution doesn't run
// successfully, the association is NON-COMPLIANT.
// 
// In MANUAL mode, you must specify the AssociationId as a parameter for the
// PutComplianceItems API operation. In this case, compliance data isn't managed
// by State Manager. It is managed by your direct call to the PutComplianceItems
// API operation.
// 
// By default, all associations use AUTO mode.
SyncCompliance *string `json:"syncCompliance,omitempty"`
// Adds or overwrites one or more tags for a State Manager association. Tags
// are metadata that you can assign to your Amazon Web Services resources. Tags
// enable you to categorize your resources in different ways, for example, by
// purpose, owner, or environment. Each tag consists of a key and an optional
// value, both of which you define.
Tags []*Tag `json:"tags,omitempty"`
// A location is a combination of Amazon Web Services Regions and Amazon Web
// Services accounts where you want to run the association. Use this action
// to create an association in multiple Regions and multiple accounts.
TargetLocations []*TargetLocation `json:"targetLocations,omitempty"`
// A key-value mapping of document parameters to target resources. Both Targets
// and TargetMaps can't be specified together.
TargetMaps []map[string][]*string `json:"targetMaps,omitempty"`
// The targets for the association. You can target managed nodes by using tags,
// Amazon Web Services resource groups, all managed nodes in an Amazon Web Services
// account, or individual managed node IDs. You can target all managed nodes
// in an Amazon Web Services account by specifying the InstanceIds key with
// a value of *. For more information about choosing targets for an association,
// see Understanding targets and rate controls in State Manager associations
// (https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-state-manager-targets-and-rate-controls.html)
// in the Amazon Web Services Systems Manager User Guide.
Targets []*Target `json:"targets,omitempty"`
}

// AssociationStatus defines the observed state of Association
type AssociationStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The association ID.
//
// Regex Pattern: `^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$`
	// +kubebuilder:validation:Optional
	AssociationID *string `json:"associationID,omitempty"`
	// The association version.
//
// Regex Pattern: `^([$]LATEST)|([1-9][0-9]*)$`
	// +kubebuilder:validation:Optional
	AssociationVersion *string `json:"associationVersion,omitempty"`
	// The date when the association was made.
	// +kubebuilder:validation:Optional
	Date *metav1.Time `json:"date,omitempty"`
	// The date on which the association was last run.
	// +kubebuilder:validation:Optional
	LastExecutionDate *metav1.Time `json:"lastExecutionDate,omitempty"`
	// The last date on which the association was successfully run.
	// +kubebuilder:validation:Optional
	LastSuccessfulExecutionDate *metav1.Time `json:"lastSuccessfulExecutionDate,omitempty"`
	// The date when the association was last updated.
	// +kubebuilder:validation:Optional
	LastUpdateAssociationDate *metav1.Time `json:"lastUpdateAssociationDate,omitempty"`
	// Information about the association.
	// +kubebuilder:validation:Optional
	Overview *AssociationOverview `json:"overview,omitempty"`
	// The association status.
	// +kubebuilder:validation:Optional
	Status *AssociationStatus_SDK `json:"status,omitempty"`
	// The CloudWatch alarm that was invoked during the association.
	// +kubebuilder:validation:Optional
	TriggeredAlarms []*AlarmStateInformation `json:"triggeredAlarms,omitempty"`
}

// Association is the Schema for the Associations API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Association struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec   AssociationSpec   `json:"spec,omitempty"`
	Status AssociationStatus `json:"status,omitempty"`
}

// AssociationList contains a list of Association
// +kubebuilder:object:root=true
type AssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items []Association `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Association{}, &AssociationList{})
}